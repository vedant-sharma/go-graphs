package main

import (
	"fmt"
	"math/rand"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"runtime"

	"github.com/go-echarts/go-echarts/v2/charts"
	"github.com/go-echarts/go-echarts/v2/opts"
	wkhtmltoimage "github.com/ninetwentyfour/go-wkhtmltoimage"

	"github.com/wcharczuk/go-chart/v2"
)

// generate random data for bar chart
func generateBarItems() []opts.BarData {
	items := make([]opts.BarData, 0)
	for i := 0; i < 7; i++ {
		items = append(items, opts.BarData{Value: rand.Intn(300)})
	}
	return items
}

func generateBarChart() {
	// create a new bar instance
	bar := charts.NewBar()
	// set some global options like Title/Legend/ToolTip or anything else
	bar.SetGlobalOptions(charts.WithTitleOpts(opts.Title{
		Title:    "My first bar chart generated by go-echarts",
		Subtitle: "It's extremely easy to use, right?",
	}))

	// Put data into instance
	bar.SetXAxis([]string{"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"}).
		AddSeries("Category A", generateBarItems()).
		AddSeries("Category B", generateBarItems())
	// Where the magic happens
	f, _ := os.Create("bar.html")
	fmt.Print("BAR CHART HTML GENERATED SUCCESSFULLY s!")
	bar.Render(f)
}

func generateChartWithGoChartLibrary() {

	// style.StrokeColor = chart.ColorGreen
	// style1.StrokeColor = chart.ColorWhite

	StackedBarChart := chart.StackedBarChart{

		Background: chart.Style{
			Padding: chart.Box{
				Top: 25,
			},
		},
		Width:        500,
		Height:       115,
		BarSpacing:   -1,
		IsHorizontal: true,
		Bars: []chart.StackedBar{
			{
				Name: "",
				Values: []chart.Value{
					{
						Value: (100 - 30),
						Style: chart.Style{
							StrokeWidth: .01,
						},
					},
					{
						Value: 30,
						Style: chart.Style{
							StrokeWidth: .01,
						},
					},
				},
			},
		},
	}

	f, _ := os.Create("output.png")
	defer f.Close()
	fmt.Println(StackedBarChart.Render(chart.PNG, f))

}

func convertHtmlToImage() {

	_, base, _, _ := runtime.Caller(0) // Relative to the runtime Dir
	dir := path.Join(path.Dir(base))
	rootDir := filepath.Dir(dir)

	// its better to use os specific path separator
	htmlDir := path.Join(rootDir, "go-graphs", "bar.html")
	// rest of your code.

	c := wkhtmltoimage.ImageOptions{Input: htmlDir, Format: "png"}

	out, _ := wkhtmltoimage.GenerateImage(&c)
	f, _ := os.Create("example.png")
	defer f.Close()
	n2, _ := f.Write(out)
	fmt.Printf("wrote %d bytes\n", n2)
}

func main() {
	generateBarChart()
	generateChartWithGoChartLibrary()
	convertHtmlToImage()
	http.ListenAndServe(":8081", nil)
}
